  ###############################################################################
  #                            INPUT PLUGINS                                    #
  ###############################################################################
  [[inputs.snmp]]
    interval = "10s"
    agents = ["<Router's IP Address>"]
    version = 2
    community = "<community string>"  

    [[inputs.snmp.table]]
      name = "interface"
      inherit_tags = ["hostname"]
        
      [[inputs.snmp.table.field]]
        name = "ifDescr"
        oid = "1.3.6.1.2.1.2.2.1.2"
        is_tag = true 
      
      [[inputs.snmp.table.field]]
        name = "ifIndex"
        oid = "1.3.6.1.2.1.2.2.1.1"

      [[inputs.snmp.table.field]]
        name = "ifInOctets"
        oid = "1.3.6.1.2.1.2.2.1.10"

      [[inputs.snmp.table.field]]
        name = "ifOutOctets"
        oid = "1.3.6.1.2.1.2.2.1.16"

      [[inputs.snmp.table.field]]
        name = "ifInErrors"
        oid = "1.3.6.1.2.1.2.2.1.14"

      [[inputs.snmp.table.field]]
        name = "ifOutErrors"
        oid = "1.3.6.1.2.1.2.2.1.20"
      
      [[inputs.snmp.table.field]]
        name = "ifInDiscards"
        oid = "1.3.6.1.2.1.2.2.1.13"
      
      [[inputs.snmp.table.field]]
        name = "ifOutDiscards"
        oid = "1.3.6.1.2.1.2.2.1.19"
      
      [[inputs.snmp.table.field]]
        name = "ifAdminStatus"
        oid = "1.3.6.1.2.1.2.2.1.7"

      [[inputs.snmp.table.field]]
        name = "ifOperStatus"
        oid = "1.3.6.1.2.1.2.2.1.8"
    [[inputs.snmp.tagpass]]
      snmp_table = ["interface"]  
    
  [[inputs.snmp]]
    interval = "10s"
    agents = ["<Router's IP Address>"]
    version = 2
    community = "<community string>"  
    [[inputs.snmp.table]]
      name = "active_ip"
      inherit_tags = ["hostname"]
      [[inputs.snmp.table.field]]
        name = "ipAdEntIfIndex"
        oid = "1.3.6.1.2.1.4.22.1.3"
      [[inputs.snmp.table.field]]
        name = "ipNetToMediaIfIndex"
        oid = "1.3.6.1.2.1.4.22.1.1"
    [[inputs.snmp.tagpass]]
      snmp_table = ["active_ip"]
  ###############################################################################
  #                            OUTPUT PLUGINS                                   #
  ###############################################################################
  [[outputs.amqp]]
    ## RabbitMQ 서버 연결 정보 설정
    url = "amqp://<id>:<pw>@192.168.0.231:5672/"

    ## 메시지 전송에 사용할 exchange 설정
    exchange = "traffic-exchange"

    ## 메시지 전송 시 사용할 routing key 설정
    routing_key = "traffic-rt-key"
    data_format = "json"
    namepass = ["interface"]

  [[outputs.amqp]]
    ## RabbitMQ 서버 연결 정보 설정
    url = "amqp://<id>:<pw>@192.168.0.231:5672/"

    ## 메시지 전송에 사용할 exchange 설정
    exchange="ipIfIndex-exchange"


    ## 메시지 전송 시 사용할 routing key 설정
    routing_key = "ipIfIndex-rt-key"
    data_format = "json"
    namepass = ["active_ip"]
  
  [global_tags]
    
  [agent]
    ## Default data collection interval for all inputs
    interval = "10s"
    ## Rounds collection interval to 'interval'
    ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
    round_interval = true

    ## Telegraf will send metrics to outputs in batches of at most
    ## metric_batch_size metrics.
    ## This controls the size of writes that Telegraf sends to output plugins.
    # metric_batch_size = 1000
    metric_batch_size = 500

    ## Maximum number of unwritten metrics per output.  Increasing this value
    ## allows for longer periods of output downtime without dropping metrics at the
    ## cost of higher maximum memory usage.
    metric_buffer_limit = 10000

    ## Collection jitter is used to jitter the collection by a random amount.
    ## Each plugin will sleep for a random time within jitter before collecting.
    ## This can be used to avoid many plugins querying things like sysfs at the
    ## same time, which can have a measurable effect on the system.
    collection_jitter = "0s"

    ## Default flushing interval for all outputs. Maximum flush_interval will be
    ## flush_interval + flush_jitter
    flush_interval = "10s"
    ## Jitter the flush interval by a random amount. This is primarily to avoid
    ## large write spikes for users running a large number of telegraf instances.
    ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
    flush_jitter = "0s"

    ## By default or when set to "0s", precision will be set to the same
    ## timestamp order as the collection interval, with the maximum being 1s.
    ##   ie, when interval = "10s", precision will be "1s"
    ##       when interval = "250ms", precision will be "1ms"
    ## Precision will NOT be used for service inputs. It is up to each individual
    ## service input to set the timestamp at the appropriate precision.
    ## Valid time units are "ns", "us" (or "µs"), "ms", "s".
    precision = ""

    ## Log at debug level.
    # debug = false
    ## Log only error level messages.
    # quiet = false

    ## Log target controls the destination for logs and can be one of "file",
    ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
    ## is determined by the "logfile" setting.
    # logtarget = "file"

    ## Name of the file to be logged to when using the "file" logtarget.  If set to
    ## the empty string then logs are written to stderr.
    # logfile = ""

    ## The logfile will be rotated after the time interval specified.  When set
    ## to 0 no time based rotation is performed.  Logs are rotated only when
    ## written to, if there is no log activity rotation may be delayed.
    # logfile_rotation_interval = "0d"

    ## The logfile will be rotated when it becomes larger than the specified
    ## size.  When set to 0 no size based rotation is performed.
    # logfile_rotation_max_size = "0MB"

    ## Maximum number of rotated archives to keep, any older logs are deleted.
    ## If set to -1, no archives are removed.
    # logfile_rotation_max_archives = 5

    ## Pick a timezone to use when logging or type 'local' for local time.
    ## Example: America/Chicago
    # log_with_timezone = ""

    ## Override default hostname, if empty use os.Hostname()
    hostname = ""
    ## If set to true, do no set the "host" tag in the telegraf agent.
    omit_hostname = false



  ###############################################################################
  #                            PROCESSOR PLUGINS                                #
  ###############################################################################



  ###############################################################################
  #                            AGGREGATOR PLUGINS                               #
  ###############################################################################
